// Dispatch gRPC API definition.
//
// Copyright:
// Copyright 2022 Frequenz Energy-as-a-Service GmbH
//
// License:
// All rights reserved.

syntax = "proto3";

package dispatch;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "frequenz/api/microgrid/microgrid.proto";

service DispatchService {
    // Returns a list of all dispatches
    rpc ListDispatches(DispatchFilter) returns (DispatchList) {
        option (google.api.http) = {
            get: "/v1/dispatches"
        };
    }

    // Create a new dispatch
    rpc CreateDispatch(DispatchCreateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/dispatches"
        };
    }

    // Update a dispatch
    rpc UpdateDispatch(DispatchUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/dispatches"
        };
    }
}

// Possible dispatch types
enum DispatchType {
    // Unspecified dispatch type, used mainly for error handling
    DISPATCH_TYPE_UNSPECIFIED = 0;

    // Shutdown dispatch event
    DISPATCH_TYPE_SHUTDOWN = 1;

    // Charge battery dispatch event
    DISPATCH_TYPE_BATTERY_CHARGE = 2;

    // Discharge battery dispatch event
    DISPATCH_TYPE_BATTERY_DISCHARGE = 3;

    // Frequency containment reserve dispatch event
    DISPATCH_TYPE_FCR = 4;

    // FCR prequalification test - charge
    // This dispatch type starts a charge-based FCR prequalifcation test
    // To charge a battery, use BATTERY_CHARGE
    DISPATCH_TYPE_FCR_TEST_CHARGE = 5;

    // FCR prequalification test - discharge
    // This dispatch type starts a discharge-based FCR prequalifcation test
    // To discharge a battery, use BATTERY_DISCHARGE
    DISPATCH_TYPE_FCR_TEST_DISCHARGE = 6;
}

// Possible dispatch statuses
enum DispatchStatus {
    // Unspecified dispatch status, used mainly for error handling
    DISPATCH_STATUS_UNSPECIFIED = 0;

    // Active dispatch status
    DISPATCH_STATUS_ACTIVE = 1;

    // Inactive dispatch status
    DISPATCH_STATUS_INACTIVE = 2;

    // Simulated dispatch status
    DISPATCH_STATUS_SIMULATED = 3;
}

// Filter parameter for specifying multiple time intervals
message TimeIntervalFilter {
    // Filter by end_time >= this timestamp
    google.protobuf.Timestamp from = 1;

    // Filter by start_time < this timestamp
    google.protobuf.Timestamp to = 2;
}

// Parameters for filtering the dispatch list
message DispatchFilter {
    // Filter by dispatch ID
    repeated uint64 id = 1;

    // Filter by microgrid ID
    repeated uint64 microgrid_id = 2;

    // Filter by dispatch type
    repeated DispatchType type = 3;

    // Filter by component ID
    repeated uint64 component_id = 4;

    // Filter by component category ID
    // Component categories should be one of inverter, battery, EV charger, etc
    repeated frequenz.api.microgrid.ComponentCategory component_category_id = 5;

    // Filter by time interval
    TimeIntervalFilter time_interval = 6;
}

// Message representing one dispatch
message Dispatch {
    // The dispatch identifier
    uint64 id = 1;

    // The microgrid identifier
    uint64 microgrid_id = 2;

    // The type of dispatch
    DispatchType type = 3;

    // The start time
    google.protobuf.Timestamp start_time = 4;

    // The end time
    google.protobuf.Timestamp end_time = 5;

    // The component IDs
    repeated uint64 component_id = 6;

    // The component category IDs
    // Component categories should be one of inverter, battery, EV charger, etc
    repeated frequenz.api.microgrid.ComponentCategory component_category_id = 7;

    // The creation time
    google.protobuf.Timestamp create_time = 8;

    // The dispatch status
    DispatchStatus status = 9;

    // The dispatch settings, dynamic JSON
    google.protobuf.Struct settings = 10;
}

// A list of dispatches
message DispatchList { repeated Dispatch dispatches = 1; }

// Message to create a new dispatch with the given attributes
message DispatchCreateRequest {
    // The microgrid identifier
    uint64 microgrid_id = 1;

    // The type of dispatch
    DispatchType type = 2;

    // The start time
    google.protobuf.Timestamp start_time = 3;

    // The end time
    google.protobuf.Timestamp end_time = 4;

    // The component IDs
    repeated uint64 component_id = 5;

    // The component category IDs
    // Component categories should be one of inverter, battery, EV charger, etc
    repeated frequenz.api.microgrid.ComponentCategory component_category_id = 6;

    // The dispatch status
    DispatchStatus status = 7;

    // The dispatch settings, dynamic JSON
    google.protobuf.Struct settings = 8;
}

// Message to update the dispatch with the given ID, with the given attributes
message DispatchUpdateRequest {
    // The dispatch identifier
    uint64 id = 1;

    // The microgrid identifier
    uint64 microgrid_id = 2;

    // The type of dispatch
    DispatchType type = 3;

    // The start time
    google.protobuf.Timestamp start_time = 4;

    // The end time
    google.protobuf.Timestamp end_time = 5;

    // The component IDs
    repeated uint64 component_id = 6;

    // The component category IDs
    // Component categories should be one of inverter, battery, EV charger, etc
    repeated frequenz.api.microgrid.ComponentCategory component_category_id = 7;

    // The creation time
    google.protobuf.Timestamp create_time = 8;

    // The dispatch status
    DispatchStatus status = 9;

    // The dispatch settings, dynamic JSON
    google.protobuf.Struct settings = 10;
}
